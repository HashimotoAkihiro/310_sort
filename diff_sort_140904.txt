*** main.c	2014-09-04 14:55:31.000000000 +0900
--- main.c_before_140904	2014-09-02 16:19:47.000000000 +0900
***************
*** 7,13 ****
--- 7,15 ----
  #define USE_SIMD        0    (using SIMD emulation)
  #define USE_SIMD        1    (using real SIMD instructions)
  */
+ #ifndef USE_SIMD
  #define USE_SIMD        1
+ #endif
  
  //#define USE_QSORT
  #define USE_RADIXSORT
***************
*** 28,35 ****
  #define DATA_START 0x90000
  #endif
  
- int niterations;                /* number of iterations for outer-loop */
- 
  /* max data size 16MB (4M words) */
  /* (at least 16MB spacing between memory region is required) */
  int *data = (int*) DATA_START;
--- 30,35 ----
***************
*** 75,92 ****
  #ifdef  USE_RADIXSORT
  /**********************************************************************/
  //#define BUCKETBIT       8    /* outer-loop is iteration of 4 */
! //#define BUCKETBIT       9    /* outer-loop is iteration of 4 (maybe 3) */
! //#define BUCKETBIT       10   /* outer-loop is iteration of 4 */
! //#define BUCKETBIT       11   /* outer-loop is iteration of 3 (max for BRAM 16KB) */
! //#define BUCKETBIT       12   /* outer-loop is iteration of 3 (max for BRAM 32KB) */
! #define BUCKETBIT       13   /* outer-loop is iteration of 3 (maybe 2) (max for BRAM 64KB) */
  //#define BUCKETBIT       16   /* outer-loop is iteration of 2 */
  #define NBUCKETS        (1 << BUCKETBIT)
  #define BUCKETMASK      (NBUCKETS - 1)
  
- #define BUCKETMASK2     ((BUCKETMASK  << BUCKETBIT)|BUCKETMASK)
- #define BUCKETMASK3     ((BUCKETMASK2 << BUCKETBIT)|BUCKETMASK)
- 
  #if BUCKETBIT < 8
  # error "BUCKETBIT should be greater than 8"
  #endif
--- 75,87 ----
  #ifdef  USE_RADIXSORT
  /**********************************************************************/
  //#define BUCKETBIT       8    /* outer-loop is iteration of 4 */
! #define BUCKETBIT       11   /* outer-loop is iteration of 3 (max for BRAM 16KB)*/
! //#define BUCKETBIT       12   /* outer-loop is iteration of 3 (max for BRAM 32KB)*/
! //#define BUCKETBIT       13   /* outer-loop is iteration of 3 (max for BRAM 64KB)*/
  //#define BUCKETBIT       16   /* outer-loop is iteration of 2 */
  #define NBUCKETS        (1 << BUCKETBIT)
  #define BUCKETMASK      (NBUCKETS - 1)
  
  #if BUCKETBIT < 8
  # error "BUCKETBIT should be greater than 8"
  #endif
***************
*** 108,124 ****
  
  #ifdef  USE_SIMD
  
- 
  #if USE_SIMD == 0
  
      simd128 zero = {0, 0, 0, 0};
-     simd128 bmask_qw = {BUCKETMASK, BUCKETMASK, BUCKETMASK, BUCKETMASK };
  
      buff1 = data;
      buff2 = BUFtbl[curBUFptr];
  
! //    for (i = 0; i < ((32+BUCKETBIT-1)/BUCKETBIT); i++) {
!     for (i = 0; i < niterations; i++) {
          int shift = i*BUCKETBIT;
          int x;
  
--- 103,116 ----
  
  #ifdef  USE_SIMD
  
  #if USE_SIMD == 0
  
      simd128 zero = {0, 0, 0, 0};
  
      buff1 = data;
      buff2 = BUFtbl[curBUFptr];
  
!     for (i = 0; i < ((32+BUCKETBIT-1)/BUCKETBIT); i++) {
          int shift = i*BUCKETBIT;
          int x;
  
***************
*** 142,151 ****
              simd128_shift_right_arithmetic(v3, v3, shift);
              simd128_shift_right_arithmetic(v4, v4, shift);
  
!             simd128_and(v1, v1, bmask_qw);
!             simd128_and(v2, v2, bmask_qw);
!             simd128_and(v3, v3, bmask_qw);
!             simd128_and(v4, v4, bmask_qw);
  
              count[v1[0]]++;
              count[v1[1]]++;
--- 134,162 ----
              simd128_shift_right_arithmetic(v3, v3, shift);
              simd128_shift_right_arithmetic(v4, v4, shift);
  
!             /* SIMD logical-AND */
!             v1[3] &= BUCKETMASK;
!             v1[2] &= BUCKETMASK;
!             v1[1] &= BUCKETMASK;
!             v1[0] &= BUCKETMASK;
! 
!             /* SIMD logical-AND */
!             v2[3] &= BUCKETMASK;
!             v2[2] &= BUCKETMASK;
!             v2[1] &= BUCKETMASK;
!             v2[0] &= BUCKETMASK;
! 
!             /* SIMD logical-AND */
!             v3[3] &= BUCKETMASK;
!             v3[2] &= BUCKETMASK;
!             v3[1] &= BUCKETMASK;
!             v3[0] &= BUCKETMASK;
! 
!             /* SIMD logical-AND */
!             v4[3] &= BUCKETMASK;
!             v4[2] &= BUCKETMASK;
!             v4[1] &= BUCKETMASK;
!             v4[0] &= BUCKETMASK;
  
              count[v1[0]]++;
              count[v1[1]]++;
***************
*** 168,177 ****
              count[v4[3]]++;
          }
  
! #if 0   /* for BRAM32 */
          for (x = 1; x < NBUCKETS; x++)
              count[x] += count[x-1];
! #else   /* for BRAM128 */
          int s = 0;
          for (x = 1; x < NBUCKETS; x += 16) {
              simd128 v1, v2, v3, v4;
--- 179,188 ----
              count[v4[3]]++;
          }
  
! #if 0
          for (x = 1; x < NBUCKETS; x++)
              count[x] += count[x-1];
! #else
          int s = 0;
          for (x = 1; x < NBUCKETS; x += 16) {
              simd128 v1, v2, v3, v4;
***************
*** 250,277 ****
              simd128_shift_right_arithmetic(v7, v3, shift);
              simd128_shift_right_arithmetic(v8, v4, shift);
  
- #if 0
              /* SIMD logical-AND */
!             v5[3] &= BUCKETMASK; v5[2] &= BUCKETMASK;
!             v5[1] &= BUCKETMASK; v5[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v6[3] &= BUCKETMASK; v6[2] &= BUCKETMASK;
!             v6[1] &= BUCKETMASK; v6[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v7[3] &= BUCKETMASK; v7[2] &= BUCKETMASK;
!             v7[1] &= BUCKETMASK; v7[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v8[3] &= BUCKETMASK; v8[2] &= BUCKETMASK;
!             v8[1] &= BUCKETMASK; v8[0] &= BUCKETMASK;
! #else
!             simd128_and(v5, v5, bmask_qw);
!             simd128_and(v6, v6, bmask_qw);
!             simd128_and(v7, v7, bmask_qw);
!             simd128_and(v8, v8, bmask_qw);
! #endif
  
              count[v8[3]]--;
              buff2[count[v8[3]]] = v4[3];
--- 261,289 ----
              simd128_shift_right_arithmetic(v7, v3, shift);
              simd128_shift_right_arithmetic(v8, v4, shift);
  
              /* SIMD logical-AND */
!             v5[3] &= BUCKETMASK;
!             v5[2] &= BUCKETMASK;
!             v5[1] &= BUCKETMASK;
!             v5[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v6[3] &= BUCKETMASK;
!             v6[2] &= BUCKETMASK;
!             v6[1] &= BUCKETMASK;
!             v6[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v7[3] &= BUCKETMASK;
!             v7[2] &= BUCKETMASK;
!             v7[1] &= BUCKETMASK;
!             v7[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v8[3] &= BUCKETMASK;
!             v8[2] &= BUCKETMASK;
!             v8[1] &= BUCKETMASK;
!             v8[0] &= BUCKETMASK;
  
              count[v8[3]]--;
              buff2[count[v8[3]]] = v4[3];
***************
*** 311,318 ****
          }
  
          /* switch buffer */
! //        if (i == ((32+BUCKETBIT-1)/BUCKETBIT)-2) {
!         if (i == niterations-2) {       /* next is last iteration */
              buff1 = buff2;
              buff2 = data;
          }
--- 323,333 ----
          }
  
          /* switch buffer */
!         if (i == 0) {
!             buff1 = buff2;
!             buff2 = BUFtbl[++curBUFptr];
!         }
!         else if (i == ((32+BUCKETBIT-1)/BUCKETBIT)-2) {
              buff1 = buff2;
              buff2 = data;
          }
***************
*** 331,348 ****
      buff1 = data;
      buff2 = BUFtbl[curBUFptr];
  
! //    for (i = 0; i < ((32+BUCKETBIT-1)/BUCKETBIT); i++) {
!     for (i = 0; i < niterations; i++) {
          int shift = i*BUCKETBIT;
          int x;
  
-         static int masktab[][4] __attribute((aligned(16))) = {
-             {         0,           0,           0,           0   },
-             { BUCKETBIT,   BUCKETBIT,   BUCKETBIT,   BUCKETBIT   },
-             { BUCKETBIT*2, BUCKETBIT*2, BUCKETBIT*2, BUCKETBIT*2 },
-             { BUCKETBIT*3, BUCKETBIT*3, BUCKETBIT*3, BUCKETBIT*3 },
-         };
- 
          for (x = 0; x < NBUCKETS; x += 16) {
              asm volatile (".set    noat\n\t"
                            "sq      $0,(%0)\n\t"
--- 346,355 ----
      buff1 = data;
      buff2 = BUFtbl[curBUFptr];
  
!     for (i = 0; i < ((32+BUCKETBIT-1)/BUCKETBIT); i++) {
          int shift = i*BUCKETBIT;
          int x;
  
          for (x = 0; x < NBUCKETS; x += 16) {
              asm volatile (".set    noat\n\t"
                            "sq      $0,(%0)\n\t"
***************
*** 354,366 ****
          }
  
          for (x = 0; x < size; x += 16) {
!             int v0, v1, v2, v3;
  
              asm volatile (".set    noat\n\t");
  
              /*
                v1 = SPR[1], v2 = SPR[2], v3 = SPR[3], v4 = SPR[4]
-               bmask_qw = SPR[6]
              */
  
              asm volatile ("lq      $1,(%0)\n\t"
--- 361,375 ----
          }
  
          for (x = 0; x < size; x += 16) {
!             int v10, v11, v12, v13;
!             int v20, v21, v22, v23;
!             int v30, v31, v32, v33;
!             int v40, v41, v42, v43;
  
              asm volatile (".set    noat\n\t");
  
              /*
                v1 = SPR[1], v2 = SPR[2], v3 = SPR[3], v4 = SPR[4]
              */
  
              asm volatile ("lq      $1,(%0)\n\t"
***************
*** 369,429 ****
                            "lq      $4,48(%0)\n\t"
                            : : "r" (&buff1[x]) );
  
!             /* load mask-vector onto SPR[6] */
!             asm volatile ("lq      $6,(%0)\n\t" :: "r" (&masktab[i][0]));
  
              asm volatile ("psravw  $1,$1,%0\n\t"
                            "psravw  $2,$2,%0\n\t"
                            "psravw  $3,$3,%0\n\t"
                            "psravw  $4,$4,%0\n\t"
                            :: "r" (shift) );
- 
              asm volatile ("pand    $1,$1,$6\n\t"
                            "pand    $2,$2,$6\n\t"
                            "pand    $3,$3,$6\n\t"
                            "pand    $4,$4,$6\n\t");
- 
              asm volatile ("pextw   %0,$1,0\n\t"
                            "pextw   %1,$1,1\n\t"
                            "pextw   %2,$1,2\n\t"
                            "pextw   %3,$1,3\n\t"
!                           : "=r" (v0), "=r" (v1), "=r" (v2), "=r" (v3) :);
!             count[v0]++;
!             count[v1]++;
!             count[v2]++;
!             count[v3]++;
  
              asm volatile ("pextw   %0,$2,0\n\t"
                            "pextw   %1,$2,1\n\t"
                            "pextw   %2,$2,2\n\t"
                            "pextw   %3,$2,3\n\t"
!                           : "=r" (v0), "=r" (v1), "=r" (v2), "=r" (v3) :);
!             count[v0]++;
!             count[v1]++;
!             count[v2]++;
!             count[v3]++;
  
              asm volatile ("pextw   %0,$3,0\n\t"
                            "pextw   %1,$3,1\n\t"
                            "pextw   %2,$3,2\n\t"
                            "pextw   %3,$3,3\n\t"
!                           : "=r" (v0), "=r" (v1), "=r" (v2), "=r" (v3) :);
!             count[v0]++;
!             count[v1]++;
!             count[v2]++;
!             count[v3]++;
  
              asm volatile ("pextw   %0,$4,0\n\t"
                            "pextw   %1,$4,1\n\t"
                            "pextw   %2,$4,2\n\t"
                            "pextw   %3,$4,3\n\t"
!                           : "=r" (v0), "=r" (v1), "=r" (v2), "=r" (v3) :);
!             count[v0]++;
!             count[v1]++;
!             count[v2]++;
!             count[v3]++;
  
              asm volatile (".set    at\n\t");
          }
  
  #if 0
--- 378,469 ----
                            "lq      $4,48(%0)\n\t"
                            : : "r" (&buff1[x]) );
  
! #if 1
!             asm volatile ("pextw   %0,$1,0\n\t"
!                           "pextw   %1,$1,1\n\t"
!                           "pextw   %2,$1,2\n\t"
!                           "pextw   %3,$1,3\n\t"
!                           : "=r" (v10), "=r" (v11), "=r" (v12), "=r" (v13) :);
!             v10 = (v10 >> shift) & BUCKETMASK;
!             v11 = (v11 >> shift) & BUCKETMASK;
!             v12 = (v12 >> shift) & BUCKETMASK;
!             v13 = (v13 >> shift) & BUCKETMASK;
! #else
!             volatile int mask128[4] __attribute((aligned(16)));
!             mask128[0] = mask128[1] = mask128[2] = mask128[3] = shift;
! 
!             asm volatile ("lq      $6,(%0)\n\t" :: "r" (&mask128[0]));
  
              asm volatile ("psravw  $1,$1,%0\n\t"
                            "psravw  $2,$2,%0\n\t"
                            "psravw  $3,$3,%0\n\t"
                            "psravw  $4,$4,%0\n\t"
                            :: "r" (shift) );
              asm volatile ("pand    $1,$1,$6\n\t"
                            "pand    $2,$2,$6\n\t"
                            "pand    $3,$3,$6\n\t"
                            "pand    $4,$4,$6\n\t");
              asm volatile ("pextw   %0,$1,0\n\t"
                            "pextw   %1,$1,1\n\t"
                            "pextw   %2,$1,2\n\t"
                            "pextw   %3,$1,3\n\t"
!                           : "=r" (v10), "=r" (v11), "=r" (v12), "=r" (v13) :);
! #endif
! 
!             count[v10]++;
!             count[v11]++;
!             count[v12]++;
!             count[v13]++;
  
              asm volatile ("pextw   %0,$2,0\n\t"
                            "pextw   %1,$2,1\n\t"
                            "pextw   %2,$2,2\n\t"
                            "pextw   %3,$2,3\n\t"
!                           : "=r" (v20), "=r" (v21), "=r" (v22), "=r" (v23) :);
! 
!             v20 = (v20 >> shift) & BUCKETMASK;
!             v21 = (v21 >> shift) & BUCKETMASK;
!             v22 = (v22 >> shift) & BUCKETMASK;
!             v23 = (v23 >> shift) & BUCKETMASK;
! 
!             count[v20]++;
!             count[v21]++;
!             count[v22]++;
!             count[v23]++;
  
              asm volatile ("pextw   %0,$3,0\n\t"
                            "pextw   %1,$3,1\n\t"
                            "pextw   %2,$3,2\n\t"
                            "pextw   %3,$3,3\n\t"
!                           : "=r" (v30), "=r" (v31), "=r" (v32), "=r" (v33) :);
! 
!             v30 = (v30 >> shift) & BUCKETMASK;
!             v31 = (v31 >> shift) & BUCKETMASK;
!             v32 = (v32 >> shift) & BUCKETMASK;
!             v33 = (v33 >> shift) & BUCKETMASK;
! 
!             count[v30]++;
!             count[v31]++;
!             count[v32]++;
!             count[v33]++;
  
              asm volatile ("pextw   %0,$4,0\n\t"
                            "pextw   %1,$4,1\n\t"
                            "pextw   %2,$4,2\n\t"
                            "pextw   %3,$4,3\n\t"
!                           : "=r" (v40), "=r" (v41), "=r" (v42), "=r" (v43) :);
  
              asm volatile (".set    at\n\t");
+ 
+             v40 = (v40 >> shift) & BUCKETMASK;
+             v41 = (v41 >> shift) & BUCKETMASK;
+             v42 = (v42 >> shift) & BUCKETMASK;
+             v43 = (v43 >> shift) & BUCKETMASK;
+ 
+             count[v40]++;
+             count[v41]++;
+             count[v42]++;
+             count[v43]++;
          }
  
  #if 0
***************
*** 525,539 ****
  
  //        for (x = size-1; x >= 0; x--) {
          for (x = size; x > 0; x -= 16) {
!             int v0, v1, v2, v3;
              int u0, u1, u2, u3;
  
              asm volatile (".set    noat\n\t");
  
              /*
-               variables map to SPRs (refer to USE_SIMD==0 code)
                v1 = SPR[1], v2 = SPR[2], v3 = SPR[3], v4 = SPR[4]
-               v5 = SPR[5], v6 = SPR[6], v7 = SPR[7], v8 = SPR[8]
              */
  
              asm volatile ("lq      $1,(%0)\n\t"
--- 565,580 ----
  
  //        for (x = size-1; x >= 0; x--) {
          for (x = size; x > 0; x -= 16) {
!             int v10, v11, v12, v13;
!             int v20, v21, v22, v23;
!             int v30, v31, v32, v33;
!             int v40, v41, v42, v43;
              int u0, u1, u2, u3;
  
              asm volatile (".set    noat\n\t");
  
              /*
                v1 = SPR[1], v2 = SPR[2], v3 = SPR[3], v4 = SPR[4]
              */
  
              asm volatile ("lq      $1,(%0)\n\t"
***************
*** 542,656 ****
                            "lq      $4,48(%0)\n\t"
                            : : "r" (&buff1[x-16]) );
  
!             asm volatile ("psravw  $5,$1,%0\n\t"
!                           "psravw  $6,$2,%0\n\t"
!                           "psravw  $7,$3,%0\n\t"
!                           "psravw  $8,$4,%0\n\t"
!                           :: "r" (shift) );
  
!             asm volatile ("pand    $5,$5,$6\n\t"
!                           "pand    $6,$6,$6\n\t"
!                           "pand    $7,$7,$6\n\t"
!                           "pand    $8,$8,$6\n\t");
  
-             /* extract from SPR[4] */
              asm volatile ("pextw   %0,$4,0\n\t"
                            "pextw   %1,$4,1\n\t"
                            "pextw   %2,$4,2\n\t"
                            "pextw   %3,$4,3\n\t"
!                           : "=r" (v0), "=r" (v1), "=r" (v2), "=r" (v3) :);
  
!             /* extract from SPR[8] */
!             asm volatile ("pextw   %0,$8,0\n\t"
!                           "pextw   %1,$8,1\n\t"
!                           "pextw   %2,$8,2\n\t"
!                           "pextw   %3,$8,3\n\t"
                            : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
  
!             count[u3]--;
!             buff2[count[u3]] = v3;
!             count[u2]--;
!             buff2[count[u2]] = v2;
!             count[u1]--;
!             buff2[count[u1]] = v1;
!             count[u0]--;
!             buff2[count[u0]] = v0;
  
              /* extract from SPR[3] */
              asm volatile ("pextw   %0,$3,0\n\t"
                            "pextw   %1,$3,1\n\t"
                            "pextw   %2,$3,2\n\t"
                            "pextw   %3,$3,3\n\t"
-                           : "=r" (v0), "=r" (v1), "=r" (v2), "=r" (v3) :);
- 
-             /* extract from SPR[7] */
-             asm volatile ("pextw   %0,$7,0\n\t"
-                           "pextw   %1,$7,1\n\t"
-                           "pextw   %2,$7,2\n\t"
-                           "pextw   %3,$7,3\n\t"
                            : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
  
!             count[u3]--;
!             buff2[count[u3]] = v3;
!             count[u2]--;
!             buff2[count[u2]] = v2;
!             count[u1]--;
!             buff2[count[u1]] = v1;
!             count[u0]--;
!             buff2[count[u0]] = v0;
  
              /* extract from SPR[2] */
              asm volatile ("pextw   %0,$2,0\n\t"
                            "pextw   %1,$2,1\n\t"
                            "pextw   %2,$2,2\n\t"
                            "pextw   %3,$2,3\n\t"
-                           : "=r" (v0), "=r" (v1), "=r" (v2), "=r" (v3) :);
- 
-             /* extract from SPR[6] */
-             asm volatile ("pextw   %0,$6,0\n\t"
-                           "pextw   %1,$6,1\n\t"
-                           "pextw   %2,$6,2\n\t"
-                           "pextw   %3,$6,3\n\t"
                            : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
  
!             count[u3]--;
!             buff2[count[u3]] = v3;
!             count[u2]--;
!             buff2[count[u2]] = v2;
!             count[u1]--;
!             buff2[count[u1]] = v1;
!             count[u0]--;
!             buff2[count[u0]] = v0;
  
              /* extract from SPR[1] */
              asm volatile ("pextw   %0,$1,0\n\t"
!                           "pextw   %1,$1,1\n\t"
!                           "pextw   %2,$1,2\n\t"
!                           "pextw   %3,$1,3\n\t"
!                           : "=r" (v0), "=r" (v1), "=r" (v2), "=r" (v3) :);
! 
!             /* extract from SPR[5] */
!             asm volatile ("pextw   %0,$5,0\n\t"
!                           "pextw   %1,$5,1\n\t"
!                           "pextw   %2,$5,2\n\t"
!                           "pextw   %3,$5,3\n\t"
                            : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
  
!             count[u3]--;
!             buff2[count[u3]] = v3;
!             count[u2]--;
!             buff2[count[u2]] = v2;
!             count[u1]--;
!             buff2[count[u1]] = v1;
!             count[u0]--;
!             buff2[count[u0]] = v0;
  
              asm volatile (".set    at\n\t");
          }
  
          /* switch buffer */
! //        if (i == ((32+BUCKETBIT-1)/BUCKETBIT)-2) {
!         if (i == niterations-2) {       /* next is last iteration */
              buff1 = buff2;
              buff2 = data;
          }
--- 583,743 ----
                            "lq      $4,48(%0)\n\t"
                            : : "r" (&buff1[x-16]) );
  
!             asm volatile ("pextw   %0,$1,0\n\t"
!                           "pextw   %1,$1,1\n\t"
!                           "pextw   %2,$1,2\n\t"
!                           "pextw   %3,$1,3\n\t"
!                           : "=r" (v10), "=r" (v11), "=r" (v12), "=r" (v13) :);
  
!             v10 = (v10 >> shift) & BUCKETMASK;
!             v11 = (v11 >> shift) & BUCKETMASK;
!             v12 = (v12 >> shift) & BUCKETMASK;
!             v13 = (v13 >> shift) & BUCKETMASK;
! 
!             asm volatile ("pextw   %0,$2,0\n\t"
!                           "pextw   %1,$2,1\n\t"
!                           "pextw   %2,$2,2\n\t"
!                           "pextw   %3,$2,3\n\t"
!                           : "=r" (v20), "=r" (v21), "=r" (v22), "=r" (v23) :);
! 
!             v20 = (v20 >> shift) & BUCKETMASK;
!             v21 = (v21 >> shift) & BUCKETMASK;
!             v22 = (v22 >> shift) & BUCKETMASK;
!             v23 = (v23 >> shift) & BUCKETMASK;
! 
!             asm volatile ("pextw   %0,$3,0\n\t"
!                           "pextw   %1,$3,1\n\t"
!                           "pextw   %2,$3,2\n\t"
!                           "pextw   %3,$3,3\n\t"
!                           : "=r" (v30), "=r" (v31), "=r" (v32), "=r" (v33) :);
! 
!             v30 = (v30 >> shift) & BUCKETMASK;
!             v31 = (v31 >> shift) & BUCKETMASK;
!             v32 = (v32 >> shift) & BUCKETMASK;
!             v33 = (v33 >> shift) & BUCKETMASK;
  
              asm volatile ("pextw   %0,$4,0\n\t"
                            "pextw   %1,$4,1\n\t"
                            "pextw   %2,$4,2\n\t"
                            "pextw   %3,$4,3\n\t"
!                           : "=r" (v40), "=r" (v41), "=r" (v42), "=r" (v43) :);
! 
!             v40 = (v40 >> shift) & BUCKETMASK;
!             v41 = (v41 >> shift) & BUCKETMASK;
!             v42 = (v42 >> shift) & BUCKETMASK;
!             v43 = (v43 >> shift) & BUCKETMASK;
! 
! /*
!             count[v43]--;
!             buff2[count[v43]] = buff1[x-1];
!             count[v42]--;
!             buff2[count[v42]] = buff1[x-2];
!             count[v41]--;
!             buff2[count[v41]] = buff1[x-3];
!             count[v40]--;
!             buff2[count[v40]] = buff1[x-4];
! 
!             count[v33]--;
!             buff2[count[v33]] = buff1[x-5];
!             count[v32]--;
!             buff2[count[v32]] = buff1[x-6];
!             count[v31]--;
!             buff2[count[v31]] = buff1[x-7];
!             count[v30]--;
!             buff2[count[v30]] = buff1[x-8];
! 
!             count[v23]--;
!             buff2[count[v23]] = buff1[x-9];
!             count[v22]--;
!             buff2[count[v22]] = buff1[x-10];
!             count[v21]--;
!             buff2[count[v21]] = buff1[x-11];
!             count[v20]--;
!             buff2[count[v20]] = buff1[x-12];
! 
!             count[v13]--;
!             buff2[count[v13]] = buff1[x-13];
!             count[v12]--;
!             buff2[count[v12]] = buff1[x-14];
!             count[v11]--;
!             buff2[count[v11]] = buff1[x-15];
!             count[v10]--;
!             buff2[count[v10]] = buff1[x-16];
! */
  
!             /* extract from SPR[4] */
!             asm volatile ("pextw   %0,$4,0\n\t"
!                           "pextw   %1,$4,1\n\t"
!                           "pextw   %2,$4,2\n\t"
!                           "pextw   %3,$4,3\n\t"
                            : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
  
!             count[v43]--;
!             buff2[count[v43]] = buff1[x-1];
!             count[v42]--;
!             buff2[count[v42]] = buff1[x-2];
!             count[v41]--;
!             buff2[count[v41]] = buff1[x-3];
!             count[v40]--;
!             buff2[count[v40]] = buff1[x-4];
  
              /* extract from SPR[3] */
              asm volatile ("pextw   %0,$3,0\n\t"
                            "pextw   %1,$3,1\n\t"
                            "pextw   %2,$3,2\n\t"
                            "pextw   %3,$3,3\n\t"
                            : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
  
!             count[v33]--;
!             buff2[count[v33]] = buff1[x-5];
!             count[v32]--;
!             buff2[count[v32]] = buff1[x-6];
!             count[v31]--;
!             buff2[count[v31]] = buff1[x-7];
!             count[v30]--;
!             buff2[count[v30]] = buff1[x-8];
  
              /* extract from SPR[2] */
              asm volatile ("pextw   %0,$2,0\n\t"
                            "pextw   %1,$2,1\n\t"
                            "pextw   %2,$2,2\n\t"
                            "pextw   %3,$2,3\n\t"
                            : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
  
!             count[v23]--;
!             buff2[count[v23]] = buff1[x-9];
!             count[v22]--;
!             buff2[count[v22]] = buff1[x-10];
!             count[v21]--;
!             buff2[count[v21]] = buff1[x-11];
!             count[v20]--;
!             buff2[count[v20]] = buff1[x-12];
  
              /* extract from SPR[1] */
              asm volatile ("pextw   %0,$1,0\n\t"
!                           "pextw   %1,$2,1\n\t"
!                           "pextw   %2,$2,2\n\t"
!                           "pextw   %3,$2,3\n\t"
                            : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
  
!             count[v13]--;
!             buff2[count[v13]] = buff1[x-13];
!             count[v12]--;
!             buff2[count[v12]] = buff1[x-14];
!             count[v11]--;
!             buff2[count[v11]] = buff1[x-15];
!             count[v10]--;
!             buff2[count[v10]] = buff1[x-16];
  
              asm volatile (".set    at\n\t");
          }
  
          /* switch buffer */
!         if (i == 0) {
!             buff1 = buff2;
!             buff2 = BUFtbl[++curBUFptr];
!         }
!         else if (i == ((32+BUCKETBIT-1)/BUCKETBIT)-2) {
              buff1 = buff2;
              buff2 = data;
          }
***************
*** 670,677 ****
      buff1 = data;
      buff2 = BUFtbl[curBUFptr];
  
! //    for (i = 0; i < ((32+BUCKETBIT-1)/BUCKETBIT); i++) {
!     for (i = 0; i < niterations; i++) {
          int shift = i*BUCKETBIT;
          int x;
  
--- 757,763 ----
      buff1 = data;
      buff2 = BUFtbl[curBUFptr];
  
!     for (i = 0; i < ((32+BUCKETBIT-1)/BUCKETBIT); i++) {
          int shift = i*BUCKETBIT;
          int x;
  
***************
*** 692,699 ****
          }
  
          /* switch buffer */
! //        if (i == ((32+BUCKETBIT-1)/BUCKETBIT)-2) {
!         if (i == niterations-2) {       /* next is last iteration */
              buff1 = buff2;
              buff2 = data;
          }
--- 778,788 ----
          }
  
          /* switch buffer */
!         if (i == 0) {
!             buff1 = buff2;
!             buff2 = BUFtbl[++curBUFptr];
!         }
!         else if (i == ((32+BUCKETBIT-1)/BUCKETBIT)-2) {
              buff1 = buff2;
              buff2 = data;
          }
***************
*** 712,719 ****
  int main(void) {
      int i;
      int n = *init_n;
-     int chkbits = 0;
  
      mylib_display_char('s');
      mylib_display_char('o');
      mylib_display_char('r');
--- 801,808 ----
  int main(void) {
      int i;
      int n = *init_n;
  
+ #if 0
      mylib_display_char('s');
      mylib_display_char('o');
      mylib_display_char('r');
***************
*** 724,729 ****
--- 813,819 ----
      mylib_display_dec(n);
      mylib_display_newline();
      mylib_display_newline();
+ #endif
      
  //    int *data = (int*) DATA_START;
  
***************
*** 732,742 ****
  
  #if USE_SIMD == 0
  
-     simd128 chks0 = { 0, 0, 0, 0 };
-     simd128 chks1 = { 0, 0, 0, 0 };
-     simd128 chks2 = { 0, 0, 0, 0 };
-     simd128 chks3 = { 0, 0, 0, 0 };
- 
      for (i = 0; i < n; i += 16) {
          simd128 c = { 0, 1, 2, 3 };
          simd128 v0, v1, v2, v3;
--- 822,827 ----
***************
*** 761,798 ****
          simd128_store(v1, &data[i+4]);
          simd128_store(v2, &data[i+8]);
          simd128_store(v3, &data[i+12]);
- 
-         /* for effective bits calculation */
-         simd128_or(chks0, chks0, v0);
-         simd128_or(chks1, chks1, v1);
-         simd128_or(chks2, chks2, v2);
-         simd128_or(chks3, chks3, v3);
      }
  
-     simd128_or(chks0, chks0, chks1);
-     simd128_or(chks2, chks2, chks3);
-     simd128_or(chks0, chks0, chks2);
- 
-     chkbits |= chks0[0];
-     chkbits |= chks0[1];
-     chkbits |= chks0[2];
-     chkbits |= chks0[3];
- 
-     /* calculation of number of iterations */
-     if ((chkbits & ~BUCKETMASK2) == 0)
-         niterations = 2;
-     else if ((chkbits & ~BUCKETMASK3) == 0)
-         niterations = 3;
-     else
-         niterations = 4;
- 
  #elif USE_SIMD == 1
  
      /* zero clear SPR[0] */
  /*  // this is NG code
      asm volatile (".set   noat\n\t"
!     "psubw  $0,$0,$0\n\t"
!     ".set   at");*/
      asm volatile (".set   noat\n\t"
                    "pinsw  $0,$0,$0,0\n\t"
                    "nop\n\t"
--- 846,860 ----
          simd128_store(v1, &data[i+4]);
          simd128_store(v2, &data[i+8]);
          simd128_store(v3, &data[i+12]);
      }
  
  #elif USE_SIMD == 1
  
      /* zero clear SPR[0] */
  /*  // this is NG code
      asm volatile (".set   noat\n\t"
!                   "psubw  $0,$0,$0\n\t"
!                   ".set   at");*/
      asm volatile (".set   noat\n\t"
                    "pinsw  $0,$0,$0,0\n\t"
                    "nop\n\t"
***************
*** 821,837 ****
                    "pinsw  $5,$5,$1,3\n\t"       // GPR[1] is still 3
                    ".set   at");
  
- //    simd128 chks0 = { 0, 0, 0, 0 };
- //    simd128 chks1 = { 0, 0, 0, 0 };
- //    simd128 chks2 = { 0, 0, 0, 0 };
- //    simd128 chks3 = { 0, 0, 0, 0 };
-     asm volatile (".set   noat\n\t"
-                   "paddw  $10,$0,$0\n\t"
-                   "paddw  $11,$0,$0\n\t"
-                   "paddw  $12,$0,$0\n\t"
-                   "paddw  $13,$0,$0\n\t"
-                   ".set   at");
- 
      for (i = 0; i < n; i += 16) {
          int d = i % (64*1024);
  
--- 883,888 ----
***************
*** 840,847 ****
          /*
            v0 = SPR[1], v1 = SPR[2], v2 = SPR[3], v3 = SPR[4]
            c  = SPR[5]
!           chks0 = SPR[10], chks1 = SPR[11], chks2 = SPR[12], chks3 = SPR[13]
!         */
          asm volatile ("lq      $1,(%0)\n\t"
                        "lq      $2,16(%0)\n\t"
                        "lq      $3,32(%0)\n\t"
--- 891,897 ----
          /*
            v0 = SPR[1], v1 = SPR[2], v2 = SPR[3], v3 = SPR[4]
            c  = SPR[5]
!          */
          asm volatile ("lq      $1,(%0)\n\t"
                        "lq      $2,16(%0)\n\t"
                        "lq      $3,32(%0)\n\t"
***************
*** 865,925 ****
                        "sq      $4,48(%0)\n\t"
                        : : "r" (&data[i]) );
  
-         /* for effective bits calculation */
-         asm volatile ("por     $10,$10,$1\n\t"
-                       "por     $11,$11,$2\n\t"
-                       "por     $12,$12,$3\n\t"
-                       "por     $13,$13,$4\n\t");
- 
          asm volatile (".set    at\n\t");
      }
  
-     asm volatile ("por     $10,$10,$11\n\t"
-                   "por     $12,$12,$13\n\t"
-                   "nop\n\t"
-                   "nop\n\t"
-                   "por     $10,$10,$12\n\t");
- 
- 
-     /* extract from SPR[10] and OR-ring into chkbits */
-     {
-         int a0, a1, a2, a3;
-         asm volatile ("pextw   %0,$5,0\n\t"
-                       "pextw   %1,$5,1\n\t"
-                       "pextw   %2,$5,2\n\t"
-                       "pextw   %3,$5,3\n\t"
-                       : "=r" (a0), "=r" (a1), "=r" (a2), "=r" (a3) :);
-         chkbits = a0 | a1 | a2 | a3;
-     }
- 
-     /* calculation of number of iterations */
-     if ((chkbits & ~BUCKETMASK2) == 0)
-         niterations = 2;
-     else if ((chkbits & ~BUCKETMASK3) == 0)
-         niterations = 3;
-     else
-         niterations = 4;
- 
  #else
  # error "illegal USE_SIMD setting"
  #endif
  
  #else   /* not-defined USE_SIMD */
! //    for (i=0; i<n; i++) data[i] = init_data[i % (64*1024)] + i;
!     for (i=0; i<n; i++) {
!         int v = init_data[i % (64*1024)] + i;
!         data[i] = v;
!         chkbits |= v;
!     }
! 
!     /* calculation of number of iterations */
!     if ((chkbits & ~BUCKETMASK2) == 0)
!         niterations = 2;
!     else if ((chkbits & ~BUCKETMASK3) == 0)
!         niterations = 3;
!     else
!         niterations = 4;
! 
  #endif  /* not-defined USE_SIMD */
  
  #ifdef  USE_SIMD
--- 915,929 ----
                        "sq      $4,48(%0)\n\t"
                        : : "r" (&data[i]) );
  
          asm volatile (".set    at\n\t");
      }
  
  #else
  # error "illegal USE_SIMD setting"
  #endif
  
  #else   /* not-defined USE_SIMD */
!     for (i=0; i<n; i++) data[i] = init_data[i % (64*1024)] + i;
  #endif  /* not-defined USE_SIMD */
  
  #ifdef  USE_SIMD
***************
*** 960,966 ****
  
          /*
            v0 = SPR[1], v1 = SPR[2]
!         */
  
          asm volatile ("lq      $1,(%0)\n\t"
                        "lq      $2,16(%0)\n\t"
--- 964,970 ----
  
          /*
            v0 = SPR[1], v1 = SPR[2]
!          */
  
          asm volatile ("lq      $1,(%0)\n\t"
                        "lq      $2,16(%0)\n\t"
***************
*** 982,987 ****
--- 986,992 ----
  
          asm volatile (".set    at\n\t");
  
+ #if 0
          mylib_display_dec(v0); mylib_display_char(' ');
          mylib_display_dec(v1); mylib_display_char(' ');
          mylib_display_dec(v2); mylib_display_char(' ');
***************
*** 991,996 ****
--- 996,1002 ----
          mylib_display_dec(v5); mylib_display_char(' ');
          mylib_display_dec(v6); mylib_display_char(' ');
          mylib_display_dec(v7); mylib_display_char(' ');
+ #endif
      }
  
      {
***************
*** 1011,1022 ****
--- 1017,1030 ----
  
          asm volatile (".set    at\n\t");
  
+ #if 0
          mylib_display_dec(v0); mylib_display_char(' ');
          mylib_display_dec(v1); mylib_display_char(' ');
          mylib_display_dec(v2); mylib_display_char(' ');
          mylib_display_dec(v3); mylib_display_char(' ');
  
          mylib_display_newline();
+ #endif
      }
  
  #else
