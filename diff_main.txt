*** main.c	2014-09-01 16:32:36.000000000 +0900
--- main.c-140902	2014-09-02 14:51:06.000000000 +0900
***************
*** 7,13 ****
--- 7,15 ----
  #define USE_SIMD        0    (using SIMD emulation)
  #define USE_SIMD        1    (using real SIMD instructions)
  */
+ #ifndef USE_SIMD
  #define USE_SIMD        1
+ #endif
  
  //#define USE_QSORT
  #define USE_RADIXSORT
***************
*** 73,80 ****
  #ifdef  USE_RADIXSORT
  /**********************************************************************/
  //#define BUCKETBIT       8    /* outer-loop is iteration of 4 */
! //#define BUCKETBIT       12   /* outer-loop is iteration of 3 */
! #define BUCKETBIT       11   /* outer-loop is iteration of 3 */
  //#define BUCKETBIT       16   /* outer-loop is iteration of 2 */
  #define NBUCKETS        (1 << BUCKETBIT)
  #define BUCKETMASK      (NBUCKETS - 1)
--- 75,83 ----
  #ifdef  USE_RADIXSORT
  /**********************************************************************/
  //#define BUCKETBIT       8    /* outer-loop is iteration of 4 */
! #define BUCKETBIT       11   /* outer-loop is iteration of 3 (max for BRAM 16KB)*/
! //#define BUCKETBIT       12   /* outer-loop is iteration of 3 (max for BRAM 32KB)*/
! //#define BUCKETBIT       13   /* outer-loop is iteration of 3 (max for BRAM 64KB)*/
  //#define BUCKETBIT       16   /* outer-loop is iteration of 2 */
  #define NBUCKETS        (1 << BUCKETBIT)
  #define BUCKETMASK      (NBUCKETS - 1)
***************
*** 83,89 ****
  # error "BUCKETBIT should be greater than 8"
  #endif
  
- //static int count[NBUCKETS];  /* counter table */
  static int count[NBUCKETS] __attribute((aligned(16)));  /* counter table */
  
  void radix_sort(int data[], int size)
--- 86,91 ----
***************
*** 177,259 ****
              count[v4[3]]++;
          }
  
!         /* this loop cannot be parallelized with SIMD */
          for (x = 1; x < NBUCKETS; x++)
              count[x] += count[x-1];
  
  //        for (x = size-1; x >= 0; x--) {
          for (x = size; x > 0; x -= 16) {
              simd128 v1, v2, v3, v4;
  
              simd128_load(v1, &buff1[x-16]);
              simd128_load(v2, &buff1[x-16+4]);
              simd128_load(v3, &buff1[x-16+8]);
              simd128_load(v4, &buff1[x-16+12]);
  
!             simd128_shift_right_arithmetic(v1, v1, shift);
!             simd128_shift_right_arithmetic(v2, v2, shift);
!             simd128_shift_right_arithmetic(v3, v3, shift);
!             simd128_shift_right_arithmetic(v4, v4, shift);
  
              /* SIMD logical-AND */
!             v1[3] &= BUCKETMASK;
!             v1[2] &= BUCKETMASK;
!             v1[1] &= BUCKETMASK;
!             v1[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v2[3] &= BUCKETMASK;
!             v2[2] &= BUCKETMASK;
!             v2[1] &= BUCKETMASK;
!             v2[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v3[3] &= BUCKETMASK;
!             v3[2] &= BUCKETMASK;
!             v3[1] &= BUCKETMASK;
!             v3[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v4[3] &= BUCKETMASK;
!             v4[2] &= BUCKETMASK;
!             v4[1] &= BUCKETMASK;
!             v4[0] &= BUCKETMASK;
! 
!             count[v4[3]]--;
!             buff2[count[v4[3]]] = buff1[x-1];
!             count[v4[2]]--;
!             buff2[count[v4[2]]] = buff1[x-2];
!             count[v4[1]]--;
!             buff2[count[v4[1]]] = buff1[x-3];
!             count[v4[0]]--;
!             buff2[count[v4[0]]] = buff1[x-4];
! 
!             count[v3[3]]--;
!             buff2[count[v3[3]]] = buff1[x-5];
!             count[v3[2]]--;
!             buff2[count[v3[2]]] = buff1[x-6];
!             count[v3[1]]--;
!             buff2[count[v3[1]]] = buff1[x-7];
!             count[v3[0]]--;
!             buff2[count[v3[0]]] = buff1[x-8];
! 
!             count[v2[3]]--;
!             buff2[count[v2[3]]] = buff1[x-9];
!             count[v2[2]]--;
!             buff2[count[v2[2]]] = buff1[x-10];
!             count[v2[1]]--;
!             buff2[count[v2[1]]] = buff1[x-11];
!             count[v2[0]]--;
!             buff2[count[v2[0]]] = buff1[x-12];
! 
!             count[v1[3]]--;
!             buff2[count[v1[3]]] = buff1[x-13];
!             count[v1[2]]--;
!             buff2[count[v1[2]]] = buff1[x-14];
!             count[v1[1]]--;
!             buff2[count[v1[1]]] = buff1[x-15];
!             count[v1[0]]--;
!             buff2[count[v1[0]]] = buff1[x-16];
          }
  
          /* switch buffer */
--- 179,325 ----
              count[v4[3]]++;
          }
  
! #if 0
          for (x = 1; x < NBUCKETS; x++)
              count[x] += count[x-1];
+ #else
+         int s = 0;
+         for (x = 1; x < NBUCKETS; x += 16) {
+             simd128 v1, v2, v3, v4;
+             simd128 v5, v6, v7, v8;
+ 
+             simd128_load(v1, &count[x-1]);
+             simd128_load(v2, &count[x-1+4]);
+             simd128_load(v3, &count[x-1+8]);
+             simd128_load(v4, &count[x-1+12]);
+ 
+             simd128_move(v5, v1);
+             simd128_move(v6, v2);
+             simd128_move(v7, v3);
+             simd128_move(v8, v4);
+ 
+             simd128_shift_left_word(v1, v1, 0);
+             simd128_shift_left_word(v2, v2, 0);
+             simd128_shift_left_word(v3, v3, 0);
+             simd128_shift_left_word(v4, v4, 0);
+ 
+             simd128_add(v5, v5, v1);
+             simd128_add(v6, v6, v2);
+             simd128_add(v7, v7, v3);
+             simd128_add(v8, v8, v4);
+ 
+             simd128_shift_left_word(v1, v1, 0);
+             simd128_shift_left_word(v2, v2, 0);
+             simd128_shift_left_word(v3, v3, 0);
+             simd128_shift_left_word(v4, v4, 0);
+ 
+             simd128_add(v5, v5, v1);
+             simd128_add(v6, v6, v2);
+             simd128_add(v7, v7, v3);
+             simd128_add(v8, v8, v4);
+ 
+             simd128_shift_left_word(v1, v1, 0);
+             simd128_shift_left_word(v2, v2, 0);
+             simd128_shift_left_word(v3, v3, 0);
+             simd128_shift_left_word(v4, v4, 0);
+ 
+             simd128_add(v5, v5, v1);
+             simd128_add(v6, v6, v2);
+             simd128_add(v7, v7, v3);
+             simd128_add(v8, v8, v4);
+ 
+             simd128_add_scalar(v6, v6, v5[3]);
+             simd128_add_scalar(v7, v7, v6[3]);
+             simd128_add_scalar(v8, v8, v7[3]);
+ 
+             simd128_add_scalar(v5, v5, s);
+             simd128_add_scalar(v6, v6, s);
+             simd128_add_scalar(v7, v7, s);
+             simd128_add_scalar(v8, v8, s);
+ 
+             simd128_store(v5, &count[x-1]);
+             simd128_store(v6, &count[x-1+4]);
+             simd128_store(v7, &count[x-1+8]);
+             simd128_store(v8, &count[x-1+12]);
+ 
+             s = v8[3];
+         }
+ #endif
  
  //        for (x = size-1; x >= 0; x--) {
          for (x = size; x > 0; x -= 16) {
              simd128 v1, v2, v3, v4;
+             simd128 v5, v6, v7, v8;
  
              simd128_load(v1, &buff1[x-16]);
              simd128_load(v2, &buff1[x-16+4]);
              simd128_load(v3, &buff1[x-16+8]);
              simd128_load(v4, &buff1[x-16+12]);
  
!             simd128_shift_right_arithmetic(v5, v1, shift);
!             simd128_shift_right_arithmetic(v6, v2, shift);
!             simd128_shift_right_arithmetic(v7, v3, shift);
!             simd128_shift_right_arithmetic(v8, v4, shift);
  
              /* SIMD logical-AND */
!             v5[3] &= BUCKETMASK;
!             v5[2] &= BUCKETMASK;
!             v5[1] &= BUCKETMASK;
!             v5[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v6[3] &= BUCKETMASK;
!             v6[2] &= BUCKETMASK;
!             v6[1] &= BUCKETMASK;
!             v6[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v7[3] &= BUCKETMASK;
!             v7[2] &= BUCKETMASK;
!             v7[1] &= BUCKETMASK;
!             v7[0] &= BUCKETMASK;
  
              /* SIMD logical-AND */
!             v8[3] &= BUCKETMASK;
!             v8[2] &= BUCKETMASK;
!             v8[1] &= BUCKETMASK;
!             v8[0] &= BUCKETMASK;
! 
!             count[v8[3]]--;
!             buff2[count[v8[3]]] = v4[3];
!             count[v8[2]]--;
!             buff2[count[v8[2]]] = v4[2];
!             count[v8[1]]--;
!             buff2[count[v8[1]]] = v4[1];
!             count[v8[0]]--;
!             buff2[count[v8[0]]] = v4[0];
! 
!             count[v7[3]]--;
!             buff2[count[v7[3]]] = v3[3];
!             count[v7[2]]--;
!             buff2[count[v7[2]]] = v3[2];
!             count[v7[1]]--;
!             buff2[count[v7[1]]] = v3[1];
!             count[v7[0]]--;
!             buff2[count[v7[0]]] = v3[0];
! 
!             count[v6[3]]--;
!             buff2[count[v6[3]]] = v2[3];
!             count[v6[2]]--;
!             buff2[count[v6[2]]] = v2[2];
!             count[v6[1]]--;
!             buff2[count[v6[1]]] = v2[1];
!             count[v6[0]]--;
!             buff2[count[v6[0]]] = v2[0];
! 
!             count[v5[3]]--;
!             buff2[count[v5[3]]] = v1[3];
!             count[v5[2]]--;
!             buff2[count[v5[2]]] = v1[2];
!             count[v5[1]]--;
!             buff2[count[v5[1]]] = v1[1];
!             count[v5[0]]--;
!             buff2[count[v5[0]]] = v1[0];
          }
  
          /* switch buffer */
***************
*** 312,327 ****
                            "lq      $4,48(%0)\n\t"
                            : : "r" (&buff1[x]) );
  
              asm volatile ("pextw   %0,$1,0\n\t"
                            "pextw   %1,$1,1\n\t"
                            "pextw   %2,$1,2\n\t"
                            "pextw   %3,$1,3\n\t"
                            : "=r" (v10), "=r" (v11), "=r" (v12), "=r" (v13) :);
- 
              v10 = (v10 >> shift) & BUCKETMASK;
              v11 = (v11 >> shift) & BUCKETMASK;
              v12 = (v12 >> shift) & BUCKETMASK;
              v13 = (v13 >> shift) & BUCKETMASK;
  
              count[v10]++;
              count[v11]++;
--- 378,414 ----
                            "lq      $4,48(%0)\n\t"
                            : : "r" (&buff1[x]) );
  
+ #if 1
              asm volatile ("pextw   %0,$1,0\n\t"
                            "pextw   %1,$1,1\n\t"
                            "pextw   %2,$1,2\n\t"
                            "pextw   %3,$1,3\n\t"
                            : "=r" (v10), "=r" (v11), "=r" (v12), "=r" (v13) :);
              v10 = (v10 >> shift) & BUCKETMASK;
              v11 = (v11 >> shift) & BUCKETMASK;
              v12 = (v12 >> shift) & BUCKETMASK;
              v13 = (v13 >> shift) & BUCKETMASK;
+ #else
+             volatile int mask128[4] __attribute((aligned(16)));
+             mask128[0] = mask128[1] = mask128[2] = mask128[3] = shift;
+ 
+             asm volatile ("lq      $6,(%0)\n\t" :: "r" (&mask128[0]));
+ 
+             asm volatile ("psravw  $1,$1,%0\n\t"
+                           "psravw  $2,$2,%0\n\t"
+                           "psravw  $3,$3,%0\n\t"
+                           "psravw  $4,$4,%0\n\t"
+                           :: "r" (shift) );
+             asm volatile ("pand    $1,$1,$6\n\t"
+                           "pand    $2,$2,$6\n\t"
+                           "pand    $3,$3,$6\n\t"
+                           "pand    $4,$4,$6\n\t");
+             asm volatile ("pextw   %0,$1,0\n\t"
+                           "pextw   %1,$1,1\n\t"
+                           "pextw   %2,$1,2\n\t"
+                           "pextw   %3,$1,3\n\t"
+                           : "=r" (v10), "=r" (v11), "=r" (v12), "=r" (v13) :);
+ #endif
  
              count[v10]++;
              count[v11]++;
***************
*** 379,387 ****
              count[v43]++;
          }
  
!         /* this loop cannot be parallelized with SIMD */
          for (x = 1; x < NBUCKETS; x++)
              count[x] += count[x-1];
  
  //        for (x = size-1; x >= 0; x--) {
          for (x = size; x > 0; x -= 16) {
--- 466,567 ----
              count[v43]++;
          }
  
! #if 0
          for (x = 1; x < NBUCKETS; x++)
              count[x] += count[x-1];
+ #else
+         /*
+           a0 a1 a2 a3|a4 a5 a6 a7|a8 a9 a10 a11|a12 a13 a14 a15|
+            0 a0 a1 a2| 0 a4 a5 a6| 0 a8  a9 a10|  0 a12 a13 a14| <= add the shifted value
+            0  0 a0 a1| 0  0 a4 a5| 0  0  a8  a9|  0   0 a12 a13| <= add the shifted value
+            0  0  0 a0| 0  0  0 a4| 0  0   0  a8|  0   0   0 a12| <= add the shifted value
+            -----------------------------------------------------
+         */
+ 
+         int s = 0;
+         for (x = 1; x < NBUCKETS; x += 16) {
+             int a1, a2, a3;
+             asm volatile (".set    noat\n\t");
+ 
+             /*
+               v1 = SPR[1], v2 = SPR[2], v3 = SPR[3], v4 = SPR[4]
+               v5 = SPR[5], v6 = SPR[6], v7 = SPR[7], v8 = SPR[8]
+             */
+ 
+             asm volatile ("lq      $1,(%0)\n\t"
+                           "lq      $2,16(%0)\n\t"
+                           "lq      $3,32(%0)\n\t"
+                           "lq      $4,48(%0)\n\t"
+                           : : "r" (&count[x-1]) );
+ 
+             asm volatile ("paddw   $5,$1,$0\n\t"
+                           "paddw   $6,$2,$0\n\t"
+                           "paddw   $7,$3,$0\n\t"
+                           "paddw   $8,$4,$0\n\t"
+                           //
+                           "psllww  $1,$1,$0\n\t"
+                           "psllww  $2,$2,$0\n\t"
+                           "psllww  $3,$3,$0\n\t"
+                           "psllww  $4,$4,$0\n\t"
+                           "paddw   $5,$5,$1\n\t"
+                           "paddw   $6,$6,$2\n\t"
+                           "paddw   $7,$7,$3\n\t"
+                           "paddw   $8,$8,$4\n\t"
+                           //
+                           "psllww  $1,$1,$0\n\t"
+                           "psllww  $2,$2,$0\n\t"
+                           "psllww  $3,$3,$0\n\t"
+                           "psllww  $4,$4,$0\n\t"
+                           "paddw   $5,$5,$1\n\t"
+                           "paddw   $6,$6,$2\n\t"
+                           "paddw   $7,$7,$3\n\t"
+                           "paddw   $8,$8,$4\n\t"
+                           //
+                           "psllww  $1,$1,$0\n\t"
+                           "psllww  $2,$2,$0\n\t"
+                           "psllww  $3,$3,$0\n\t"
+                           "psllww  $4,$4,$0\n\t"
+                           "paddw   $5,$5,$1\n\t"
+                           "paddw   $6,$6,$2\n\t"
+                           "paddw   $7,$7,$3\n\t"
+                           "paddw   $8,$8,$4\n\t"
+                           //
+                           "pextw   %0,$5,3\n\t"
+                           "nop\n\t"
+                           "nop\n\t"
+                           "paddsw  $6,$6,%0\n\t"
+                           "nop\n\t"
+                           "nop\n\t"
+                           "pextw   %1,$6,3\n\t"
+                           "nop\n\t"
+                           "nop\n\t"
+                           "paddsw  $7,$7,%1\n\t"
+                           "nop\n\t"
+                           "nop\n\t"
+                           "pextw   %2,$7,3\n\t"
+                           "nop\n\t"
+                           "nop\n\t"
+                           "paddsw  $8,$8,%2\n\t"
+                           : "=r" (a1), "=r" (a2), "=r" (a3) :);
+ 
+             asm volatile ("paddsw  $5,$5,%0\n\t"
+                           "paddsw  $6,$6,%0\n\t"
+                           "paddsw  $7,$7,%0\n\t"
+                           "paddsw  $8,$8,%0\n\t"
+                           :: "r" (s));
+ 
+             asm volatile ("sq      $5,(%0)\n\t"
+                           "sq      $6,16(%0)\n\t"
+                           "sq      $7,32(%0)\n\t"
+                           "sq      $8,48(%0)\n\t"
+                           : : "r" (&count[x-1]) );
+ 
+             // s = v8[3];
+             asm volatile ("pextw   %0,$8,3\n\t" : "=r" (s));
+ 
+             asm volatile (".set    at\n\t");
+         }
+ #endif
  
  //        for (x = size-1; x >= 0; x--) {
          for (x = size; x > 0; x -= 16) {
***************
*** 389,394 ****
--- 569,575 ----
              int v20, v21, v22, v23;
              int v30, v31, v32, v33;
              int v40, v41, v42, v43;
+             int u0, u1, u2, u3;
  
              asm volatile (".set    noat\n\t");
  
***************
*** 441,453 ****
                            "pextw   %3,$4,3\n\t"
                            : "=r" (v40), "=r" (v41), "=r" (v42), "=r" (v43) :);
  
-             asm volatile (".set    at\n\t");
- 
              v40 = (v40 >> shift) & BUCKETMASK;
              v41 = (v41 >> shift) & BUCKETMASK;
              v42 = (v42 >> shift) & BUCKETMASK;
              v43 = (v43 >> shift) & BUCKETMASK;
  
              count[v43]--;
              buff2[count[v43]] = buff1[x-1];
              count[v42]--;
--- 622,633 ----
                            "pextw   %3,$4,3\n\t"
                            : "=r" (v40), "=r" (v41), "=r" (v42), "=r" (v43) :);
  
              v40 = (v40 >> shift) & BUCKETMASK;
              v41 = (v41 >> shift) & BUCKETMASK;
              v42 = (v42 >> shift) & BUCKETMASK;
              v43 = (v43 >> shift) & BUCKETMASK;
  
+ /*
              count[v43]--;
              buff2[count[v43]] = buff1[x-1];
              count[v42]--;
***************
*** 483,488 ****
--- 663,735 ----
              buff2[count[v11]] = buff1[x-15];
              count[v10]--;
              buff2[count[v10]] = buff1[x-16];
+ */
+ 
+             /* extract from SPR[4] */
+             asm volatile ("pextw   %0,$4,0\n\t"
+                           "pextw   %1,$4,1\n\t"
+                           "pextw   %2,$4,2\n\t"
+                           "pextw   %3,$4,3\n\t"
+                           : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
+ 
+             count[v43]--;
+             buff2[count[v43]] = buff1[x-1];
+             count[v42]--;
+             buff2[count[v42]] = buff1[x-2];
+             count[v41]--;
+             buff2[count[v41]] = buff1[x-3];
+             count[v40]--;
+             buff2[count[v40]] = buff1[x-4];
+ 
+             /* extract from SPR[3] */
+             asm volatile ("pextw   %0,$3,0\n\t"
+                           "pextw   %1,$3,1\n\t"
+                           "pextw   %2,$3,2\n\t"
+                           "pextw   %3,$3,3\n\t"
+                           : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
+ 
+             count[v33]--;
+             buff2[count[v33]] = buff1[x-5];
+             count[v32]--;
+             buff2[count[v32]] = buff1[x-6];
+             count[v31]--;
+             buff2[count[v31]] = buff1[x-7];
+             count[v30]--;
+             buff2[count[v30]] = buff1[x-8];
+ 
+             /* extract from SPR[2] */
+             asm volatile ("pextw   %0,$2,0\n\t"
+                           "pextw   %1,$2,1\n\t"
+                           "pextw   %2,$2,2\n\t"
+                           "pextw   %3,$2,3\n\t"
+                           : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
+ 
+             count[v23]--;
+             buff2[count[v23]] = buff1[x-9];
+             count[v22]--;
+             buff2[count[v22]] = buff1[x-10];
+             count[v21]--;
+             buff2[count[v21]] = buff1[x-11];
+             count[v20]--;
+             buff2[count[v20]] = buff1[x-12];
+ 
+             /* extract from SPR[1] */
+             asm volatile ("pextw   %0,$1,0\n\t"
+                           "pextw   %1,$2,1\n\t"
+                           "pextw   %2,$2,2\n\t"
+                           "pextw   %3,$2,3\n\t"
+                           : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);
+ 
+             count[v13]--;
+             buff2[count[v13]] = buff1[x-13];
+             count[v12]--;
+             buff2[count[v12]] = buff1[x-14];
+             count[v11]--;
+             buff2[count[v11]] = buff1[x-15];
+             count[v10]--;
+             buff2[count[v10]] = buff1[x-16];
+ 
+             asm volatile (".set    at\n\t");
          }
  
          /* switch buffer */
***************
*** 555,561 ****
      int i;
      int n = *init_n;
  
- #if 0
      mylib_display_char('s');
      mylib_display_char('o');
      mylib_display_char('r');
--- 802,807 ----
***************
*** 566,572 ****
      mylib_display_dec(n);
      mylib_display_newline();
      mylib_display_newline();
- #endif
      
  //    int *data = (int*) DATA_START;
  
--- 812,817 ----
***************
*** 576,583 ****
  #if USE_SIMD == 0
  
      for (i = 0; i < n; i += 16) {
-         simd128 v0, v1, v2, v3;
          simd128 c = { 0, 1, 2, 3 };
          int d = i % (64*1024);
  
          simd128_load(v0, (int*)&init_data[d]);
--- 821,828 ----
  #if USE_SIMD == 0
  
      for (i = 0; i < n; i += 16) {
          simd128 c = { 0, 1, 2, 3 };
+         simd128 v0, v1, v2, v3;
          int d = i % (64*1024);
  
          simd128_load(v0, (int*)&init_data[d]);
***************
*** 739,745 ****
  
          asm volatile (".set    at\n\t");
  
- #if 0
          mylib_display_dec(v0); mylib_display_char(' ');
          mylib_display_dec(v1); mylib_display_char(' ');
          mylib_display_dec(v2); mylib_display_char(' ');
--- 984,989 ----
***************
*** 749,756 ****
          mylib_display_dec(v5); mylib_display_char(' ');
          mylib_display_dec(v6); mylib_display_char(' ');
          mylib_display_dec(v7); mylib_display_char(' ');
- #endif
- 
      }
  
      {
--- 993,998 ----
***************
*** 771,785 ****
  
          asm volatile (".set    at\n\t");
  
- #if 0
          mylib_display_dec(v0); mylib_display_char(' ');
          mylib_display_dec(v1); mylib_display_char(' ');
          mylib_display_dec(v2); mylib_display_char(' ');
          mylib_display_dec(v3); mylib_display_char(' ');
  
          mylib_display_newline();
- #endif
- 
      }
  
  #else
--- 1013,1024 ----
